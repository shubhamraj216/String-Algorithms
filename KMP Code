/*Given two strings S and T, write a function to find if T is present as a substring inside S or not. If yes, return the starting index otherwise return -1.*/

//code

#include<bits/stdc++.h>
using namespace std;

int*getlps(char T[]){
    int len=strlen(T);
    int* lps=new int[len];
    lps[0]=0;
    int i=1;
    int j=0;
    while(i<len){
        if(T[i]==T[j]){
            lps[i]=j+1;
            i++;
            j++;
        }else{
            if(j!=0){
                j=lps[j-1];
            }else{
                lps[i]=0;
                i++;
            }
        }
    }
    return lps;
}
int findString(char S[], char T[]) {
    int lenP=strlen(T);
    int lenT=strlen(S);
    int i=0;
    int j=0;
    int z=-1;
    int* lps=getlps(T);
    while(i<lenT&&j<lenP){
        if(S[i]==T[j]){
            if(z==-1){
                z=i;
            }
            i++;
            j++;
        }else{
            if(j!=0){
                j=lps[j-1];
                z=-1;
            }else{
                i++;
            }
        }
    }
    if(j==lenP){
        return z;
    }else{
        return z;
    }
}
int main() {
    char S[1000], T[1000];
    cin.getline(S, 1000);
    cin.getline(T, 1000);
    cout << findString(S, T) << endl;
}




/* Test Case 
  Input: October
         obe
  Output: 3
*/
